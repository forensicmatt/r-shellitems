extern crate rshellitems;
extern crate serde_json;
extern crate env_logger;
use std::io::Cursor;
use rshellitems::shellitem::{ShellItem};

fn example_0x1f_001(){
    let buffer: &[u8] = &[
        0x14,0x00,0x1F,0x48,0xBA,0x8F,0x0D,0x45,0x25,0xAD,0xD0,0x11,0x98,0xA8,0x08,0x00,
        0x36,0x1B,0x11,0x03
    ];

    match ShellItem::new(Cursor::new(buffer)) {
        Ok(shell_item) => {
            let shell_item_json = serde_json::to_string(&shell_item).unwrap();

            println!("{:#?}",shell_item);
            println!("{}",shell_item_json);
        },
        Err(err) => {
            println!("{}",err);
        }
    }
}

fn example_0x31_001(){
    let buffer: &[u8] = &[
        0x54,0x00,0x31,0x00,0x00,0x00,0x00,0x00,0x70,0x40,0x72,0xA0,0x10,0x00,0x44,0x45,
        0x54,0x41,0x49,0x4C,0x7E,0x31,0x00,0x00,0x3C,0x00,0x03,0x00,0x04,0x00,0xEF,0xBE,
        0x68,0x40,0x5A,0xB1,0x70,0x40,0x72,0xA0,0x14,0x00,0x00,0x00,0x44,0x00,0x65,0x00,
        0x74,0x00,0x61,0x00,0x69,0x00,0x6C,0x00,0x65,0x00,0x64,0x00,0x20,0x00,0x44,0x00,
        0x6F,0x00,0x63,0x00,0x75,0x00,0x6D,0x00,0x65,0x00,0x6E,0x00,0x74,0x00,0x73,0x00,
        0x00,0x00,0x18,0x00
    ];

    match ShellItem::new(Cursor::new(buffer)) {
        Ok(shell_item) => {
            let shell_item_json = serde_json::to_string(&shell_item).unwrap();

            println!("{:#?}",shell_item);
            println!("{}",shell_item_json);
        },
        Err(err) => {
            println!("{}",err);
        }
    }
}

fn example_0x32_001(){
    let buffer: &[u8] = &[
        0x80,0x00,0x32,0x00,0xFA,0x0A,0x01,0x00,0x68,0x40,0x6E,0xB1,0x20,0x00,0x43,0x4F,
        0x50,0x59,0x4F,0x46,0x7E,0x31,0x2E,0x58,0x4C,0x53,0x00,0x00,0x64,0x00,0x03,0x00,
        0x04,0x00,0xEF,0xBE,0x68,0x40,0x6E,0xB1,0x70,0x40,0x70,0xA0,0x14,0x00,0x00,0x00,
        0x43,0x00,0x6F,0x00,0x70,0x00,0x79,0x00,0x20,0x00,0x6F,0x00,0x66,0x00,0x20,0x00,
        0x4D,0x00,0x65,0x00,0x74,0x00,0x61,0x00,0x6C,0x00,0x20,0x00,0x41,0x00,0x6C,0x00,
        0x6C,0x00,0x6F,0x00,0x79,0x00,0x20,0x00,0x4C,0x00,0x69,0x00,0x73,0x00,0x74,0x00,
        0x20,0x00,0x52,0x00,0x65,0x00,0x73,0x00,0x65,0x00,0x61,0x00,0x72,0x00,0x63,0x00,
        0x68,0x00,0x2E,0x00,0x78,0x00,0x6C,0x00,0x73,0x00,0x78,0x00,0x00,0x00,0x1C,0x00
    ];

    match ShellItem::new(Cursor::new(buffer)) {
        Ok(shell_item) => {
            let shell_item_json = serde_json::to_string(&shell_item).unwrap();

            println!("{:#?}",shell_item);
            println!("{}",shell_item_json);
        },
        Err(err) => {
            println!("{}",err);
        }
    }
}

fn example_debug(){
    let buffer: &[u8] = &[
        0x94,0x00,0x31,0x00,0x00,0x00,0x00,0x00,0x0C,0x43,0x4A,0x08,0x11,0x00,0x50,0x52,
        0x4F,0x47,0x52,0x41,0x7E,0x32,0x00,0x00,0x7C,0x00,0x08,0x00,0x04,0x00,0xEF,0xBE,
        0xFA,0x40,0xC0,0x2C,0x0C,0x43,0x4A,0x08,0x2A,0x00,0x00,0x00,0x8D,0x0E,0x00,0x00,
        0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x52,0x00,0x00,0x00,
        0x00,0x00,0x50,0x00,0x72,0x00,0x6F,0x00,0x67,0x00,0x72,0x00,0x61,0x00,0x6D,0x00,
        0x20,0x00,0x46,0x00,0x69,0x00,0x6C,0x00,0x65,0x00,0x73,0x00,0x20,0x00,0x28,0x00,
        0x78,0x00,0x38,0x00,0x36,0x00,0x29,0x00,0x00,0x00,0x40,0x00,0x73,0x00,0x68,0x00,
        0x65,0x00,0x6C,0x00,0x6C,0x00,0x33,0x00,0x32,0x00,0x2E,0x00,0x64,0x00,0x6C,0x00,
        0x6C,0x00,0x2C,0x00,0x2D,0x00,0x32,0x00,0x31,0x00,0x38,0x00,0x31,0x00,0x37,0x00,
        0x00,0x00,0x18,0x00
    ];

    match ShellItem::new(Cursor::new(buffer)) {
        Ok(shell_item) => {
            let shell_item_json = serde_json::to_string(&shell_item).unwrap();

            println!("{:#?}",shell_item);
            println!("{}",shell_item_json);
        },
        Err(err) => {
            println!("{}",err);
        }
    }
}

fn main() {
    env_logger::init();
    example_0x1f_001();
    example_0x31_001();
    example_0x32_001();
    example_debug();
}
